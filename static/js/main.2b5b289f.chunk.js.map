{"version":3,"sources":["App.js","Callback.js","Login.js","history.js","routes.js","auth.js","serviceWorker.js","index.js"],"names":["App","route","this","props","history","replace","concat","auth","login","logout","isAuthenticated","react_default","a","createElement","Navbar","fluid","Header","Brand","href","Button","bsStyle","className","onClick","navigate","bind","Component","Callback","Login","console","log","createHistory","Auth","Object","classCallCheck","auth0","WebAuth","domain","clientID","redirectUri","responseType","scope","handleAuthentication","authorize","_this","parseHash","err","authResult","accessToken","idToken","setSession","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","removeItem","parse","getItem","nextState","test","location","hash","Boolean","window","hostname","match","ReactDOM","render","Router","component","Route","path","src_App_0","assign","src_Login","src_Callback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b5b289f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Navbar, Button } from 'react-bootstrap';\nimport './App.css';\n\nclass App extends Component {\n  navigate(route) {\n    this.props.history.replace(`/${route}`)\n  }\n\n  login() {\n    this.props.auth.login();\n  }\n\n  logout() {\n    this.props.auth.logout();\n  }\n\n  render() {\n    const { isAuthenticated } = this.props.auth;\n\n    return (\n      <div>\n        <Navbar fluid>\n          <Navbar.Header>\n            <Navbar.Brand>\n              <a href=\"#\">Auth0 - React</a>\n            </Navbar.Brand>\n            <Button\n              bsStyle=\"primary\"\n              className=\"btn-margin\"\n              onClick={this.navigate.bind(this, 'home')}\n            >\n              Home\n            </Button>\n            {\n              !isAuthenticated() && (\n                  <Button\n                    bsStyle=\"primary\"\n                    className=\"btn-margin\"\n                    onClick={this.login.bind(this)}\n                  >\n                    Log In\n                  </Button>\n                )\n            }\n            {\n              isAuthenticated() && (\n                  <Button\n                    bsStyle=\"primary\"\n                    className=\"btn-margin\"\n                    onClick={this.logout.bind(this)}\n                  >\n                    Log Out\n                  </Button>\n                )\n            }\n          </Navbar.Header>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\nclass Callback extends Component {\n  render() {\n    return (\n      <p>\n        loading...\n      </p>\n    );\n  }\n}\n\nexport default Callback;\n","import React, { Component } from 'react';\n\nclass Login extends Component {\n\n  render() {\n    const { isAuthenticated } = this.props.auth;\n    console.log(isAuthenticated());\n    if (!isAuthenticated()) this.props.auth.login();\n    return (\n      <div>\n        Looks like you're already logged in.\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import createHistory from 'history/createBrowserHistory';\n\nexport default createHistory();\n","import React from 'react';\nimport { Route, Router } from 'react-router-dom';\nimport App from './App';\nimport Callback from './Callback';\nimport Login from './Login';\nimport Auth from './auth';\nimport history from './history';\n\nconst auth = new Auth();\n\nconst handleAuthentication = (nextState, replace) => {\n  if (/access_token|id_token|error/.test(nextState.location.hash)) {\n    auth.handleAuthentication();\n  }\n}\n\nexport default function makeMainRoutes () {\n  return (\n    <Router history={history} component={App}>\n      <div>\n        <Route path=\"/\" render={(props) => <App auth={auth} {...props} />} />\n        <Route path=\"/login\" render={(props) => <Login auth={auth} {...props} />} />\n        <Route path=\"/callback\" render={(props) => {\n          handleAuthentication(props);\n          return <Callback {...props} />\n        }}/>\n      </div>\n    </Router>\n  );\n}\n","import auth0 from 'auth0-js';\nimport history from './history';\n\nexport default class Auth {\n  constructor() {\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  auth0 = new auth0.WebAuth({\n    domain: 'lukedavis.auth0.com',\n    clientID: '1ENo4EF46bA1B2d9aC4LLIkB6Tb9ok80',\n    // maybe change this to anthropolocast\n    redirectUri: 'http://localhost:3000/callback',\n    responseType: 'token id_token',\n    scope: 'openid'\n  });\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n        history.replace('/home');\n      } else if (err) {\n        history.replace('/home');\n        console.log(err);\n      }\n    });\n  }\n\n  setSession(authResult) {\n    // Set the time that the Access Token will expire at\n    let expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\n    localStorage.setItem('access_token', authResult.accessToken);\n    localStorage.setItem('id_token', authResult.idToken);\n    localStorage.setItem('expires_at', expiresAt);\n    // navigate to the home route\n    history.replace('/home');\n  }\n\n  logout() {\n    // Clear Access Token and ID Token from local storage\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('id_token');\n    localStorage.removeItem('expires_at');\n    // navigate to the home route\n    history.replace('/home');\n  }\n\n  isAuthenticated() {\n    // Check whether the current time is past the\n    // Access Token's expiry time\n    let expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n    return new Date().getTime() < expiresAt;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}